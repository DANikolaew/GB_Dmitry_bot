from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from botV2.Config.constants import answer
from botV2.keyboards.keyboards import get_main_keyboard
from botV2.keyboards.keyboards_dialogue import dialogue_keyboard
from aiogram.filters import Command
import logging

router = Router()

class AnswerUser(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()
    question6 = State()
    question7 = State()
    question8 = State()
    question9 = State()
    question10 = State()

@router.message(Command("dialogue"))
async def cmd_answer1(message: types.Message, state: FSMContext):
    logging.info("Starting dialogue")
    await message.answer(
        text="–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç:\n"
        "–í–æ–ø—Ä–æ—Å 1:\n"
        "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –≤—ã —Ñ–∏–ª—å–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question1)

@router.message(AnswerUser.question1)
async def cmd_answer2(message: types.Message, state: FSMContext):
    logging.info(f"Answer 1 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question1=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 2:\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ª–∏ –≤–∞—Å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∏ –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question2)

@router.message(AnswerUser.question2)
async def cmd_answer3(message: types.Message, state: FSMContext):
    logging.info(f"Answer 2 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question2=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 3:\n"
        "–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question3)

@router.message(AnswerUser.question3)
async def cmd_answer4(message: types.Message, state: FSMContext):
    logging.info(f"Answer 3 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question3=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 4:\n"
        "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –≤—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question4)

@router.message(AnswerUser.question4)
async def cmd_answer5(message: types.Message, state: FSMContext):
    logging.info(f"Answer 4 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question4=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 5:\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ª–∏ –≤–∞—Å –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question5)

@router.message(AnswerUser.question5)
async def cmd_answer6(message: types.Message, state: FSMContext):
    logging.info(f"Answer 5 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question5=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 6:\n"
        "–ù—Ä–∞–≤—è—Ç—Å—è –ª–∏ –≤–∞–º –∫–æ–º–µ–¥–∏–π–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question6)

@router.message(AnswerUser.question6)
async def cmd_answer7(message: types.Message, state: FSMContext):
    logging.info(f"Answer 6 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question6=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 7:\n"
        "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –≤—ã —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question7)

@router.message(AnswerUser.question7)
async def cmd_answer8(message: types.Message, state: FSMContext):
    logging.info(f"Answer 7 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question7=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 8:\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ª–∏ –≤–∞—Å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question8)

@router.message(AnswerUser.question8)
async def cmd_answer9(message: types.Message, state: FSMContext):
    logging.info(f"Answer 8 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question8=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 9:\n"
        "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤–∏–¥–µ–æ –ø–æ —Ö–æ–±–±–∏ –∏ —Å—Ç–∏–ª—é –∂–∏–∑–Ω–∏ –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question9)

@router.message(AnswerUser.question9)
async def cmd_answer10(message: types.Message, state: FSMContext):
    logging.info(f"Answer 9 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question9=message.text)
    await message.answer(
        text="–í–æ–ø—Ä–æ—Å 10:\n"
        "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ª–∏ –≤–∞—Å –Ω–∞—É—á–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube?",
        reply_markup=dialogue_keyboard()
    )
    await state.set_state(AnswerUser.question10)

@router.message(AnswerUser.question10)
async def cmd_finish_test(message: types.Message, state: FSMContext):
    logging.info(f"Answer 10 received: {message.text}")
    if message.text not in answer:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(question10=message.text)
    user_data = await state.get_data()

    def get_emoji(response):
        emojis = {
            "–¢–æ—á–Ω–æ –Ω–µ—Ç": "üî¥",
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç": "üü†",
            "–ù–µ –∑–Ω–∞—é": "üü°",
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞": "üü¢",
            "–î–∞": "üü¢"
        }
        return emojis.get(response, "")

    result_text = (
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        f"1. –§–∏–ª—å–º—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {get_emoji(user_data['question1'])}\n"
        f"2. –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {get_emoji(user_data['question2'])}\n"
        f"3. –ú—É–∑—ã–∫–∞: {get_emoji(user_data['question3'])}\n"
        f"4. –°–ø–æ—Ä—Ç: {get_emoji(user_data['question4'])}\n"
        f"5. –ò–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {get_emoji(user_data['question5'])}\n"
        f"6. –ö–æ–º–µ–¥–∏–π–Ω—ã–µ –≤–∏–¥–µ–æ: {get_emoji(user_data['question6'])}\n"
        f"7. –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {get_emoji(user_data['question7'])}\n"
        f"8. –ù–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞: {get_emoji(user_data['question8'])}\n"
        f"9. –•–æ–±–±–∏ –∏ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏: {get_emoji(user_data['question9'])}\n"
        f"10. –ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {get_emoji(user_data['question10'])}\n"
    )

    await message.answer(text=result_text, reply_markup=get_main_keyboard() )
    await state.clear()
